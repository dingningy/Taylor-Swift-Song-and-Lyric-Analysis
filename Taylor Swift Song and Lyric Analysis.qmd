---
title: "Taylor Swift Song and Lyric Analysis"
author: "Dingning Yang"
date: "2025-02-15"
format: 
 html:
    toc: true
    toc-depth: 3
    toc-title: "Table of Contents"
    number-sections: true
    highlight-style: github
    theme: cosmo
    fontsize: 1.25em
    linestretch: 1.5
execute:
  echo: false
  warning: false
  message: false
---

```{r}
#| label: setup
#| include: false
# Install required packages
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(ggiraph)){install.packages("ggiraph")}
if(!require(viridis)){install.packages("viridis")}
if(!require(knitr)){install.packages("knitr")}
if(!require(kableExtra)){install.packages("kableExtra")}
if(!require(plotly)){install.packages("plotly")}
if(!require(wordcloud2)){install.packages("wordcloud2")}
if(!require(shiny)){install.packages("shiny")}
if(!require(caret)){install.packages("caret")}
if(!require(gridExtra)){install.packages("gridExtra")}
if(!require(tidytext)){install.packages("tidytext")}
if(!require(textdata)){install.packages("textdata")}


# List of required packages
required_packages <- c ("tidyverse", "ggplot2", "ggiraph", "viridis", "knitr", "kableExtra", "plotly", "wordcloud2", "shiny","caret","gridExtra", "tidytext", "textdata")

# Load required packages
lapply(required_packages, library, character.only = TRUE)
set.seed(123)

```

## Spotify Data Analysis - Taylor As A Brand

This project first focuses on analyzing Taylor Swift's music using data from her songs' Spotify data. The raw dataset from Kaggle includes different data types such as album name, track name, release date (***categorical***); acousticness, danceability, energy, popularity scores (***numeric***), etc. Data cleaning and transformation were performed before analyzing the data.

```{r}
#| label: Source cleaned and transformed sourced script
#| include: false

source("Source/Data Cleaning.R")

```

### Descriptive Analysis

The Spotify dataset contains `r n_distinct (ts.spotify$id)` tracks from `r n_distinct (ts.spotify$album)` albums of Taylor Swift. Specifically, there are `r nrow(ts.spotify[ts.spotify$album_label == "Republic", ])` tracks and `r length(unique(ts.spotify$album[ts.spotify$album_label == "Republic"]))` albums under the Republic record label. Under the Big Machine record label, there are `r nrow(ts.spotify[ts.spotify$album_label == "Big Machine", ])` tracks and `r length(unique(ts.spotify$album[ts.spotify$album_label == "Big Machine"]))` albums. Table 1 summarizes the album release time and average popularity scores of different albums.

```{r}
#| label: Generate album release time and popularity table
#| tbl-cap: "Table 1: Album Release Time and Popularity"

album_summary <- ts.spotify %>%
  mutate(track_number = as.numeric(as.character(track_number))) %>% 
  group_by(album) %>%
  summarise(
    album_label = first(album_label),
    release_year = first(release_year),
    release_month = first(release_month),
    avg_popularity = sum(popularity) / max(track_number),
    .groups = 'drop'
  ) %>%
  arrange(desc(release_year), desc(release_month), desc(avg_popularity))
  
# Create the kable table
album_summary %>%
  kable(
    caption = "Album Release Time and Popularity",
    col.names = c("Album", "Label", "Year", "Month", "Avg. Popularity"),
    digits = 2,
    align = c('l', 'l', 'c', 'c', 'r')
  ) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
                full_width = FALSE) %>%
  column_spec(1, bold = TRUE) %>%
  row_spec(0, bold = TRUE)




```

Specifically, `r round(100 * sum(ts.spotify$album_label == "Republic") / nrow(ts.spotify), 1)`% of Taylor Swift's songs are under the Republic record label, while `r round(100 * sum(ts.spotify$album_label == "Big Machine") / nrow(ts.spotify), 1)`% are under the Big Machine record label.

```{r}
#| label: fig-album-label-percentage
#| fig.cap: "Percentage of Taylor Swift's Songs by Record Label"
#| include: true

# Summarize data for album label
label_data <- ts.spotify %>%
  group_by(album_label) %>%
  summarise(count = n(), .groups = 'drop') %>%
  mutate(percentage = count / sum(count) * 100)  # Calculate percentage

# Create the pie chart
label_pie <- plot_ly(label_data, 
              labels = ~album_label, 
              values = ~count, 
              type = 'pie', 
              textinfo = 'label+percent', 
              hoverinfo = 'text', 
              text = ~paste(album_label, ": ", count, " (", round(percentage, 1), "%)", sep = ""),
              marker = list(colors = viridis::viridis(nrow(label_data)))) %>%
  layout(title = "Percentage of Taylor Swift's Songs by Record Label",
         showlegend = TRUE,
         legend = list(orientation = "h", xanchor = "center", x = 0.5, y = -0.2))

# Show the plot
label_pie

```


The dataset also includes music features of each song, which are explained in the following sections:

#### Acousticness

A confidence measure from 0.0 to 1.0 of whether the track is acoustic. Tracks with values close to 0.0 are likely to have minimal acoustic elements and are more likely produced using electronic instruments or heavily synthesized sounds. Tracks with values close to 1.0 are likely to have a strong presence of acoustic elements, such as acoustic guitar, piano, or other non-electronic instruments.

For instance, the lowest acousticness score is 0.000 for ***Style*** and the highest is 0.971 for ***Itâ€™s Nice To Have A Friend***.

##### Style

Click the button below to listen to ***Style***: Low Acousticness Score

<audio controls>

<source src="audio/Taylor Swift - Style.mp3" type="audio/mpeg">

Your browser does not support the audio element. </audio>

##### It's Nice To Have A Friend

Click the button below to listen to ***It's Nice To Have A Friend***: High Acousticness Score

<audio controls>

<source src="audio/Taylor Swift - It's Nice To Have A Friend.mp3" type="audio/mpeg">

Your browser does not support the audio element. </audio>

##### Summary

Specifically, the average acousticness score of Taylor Swift's songs is `r round(mean(ts.spotify$acousticness), 2)`(*SD* = `r round(sd(ts.spotify$acousticness, na.rm = TRUE), 1)`).

#### Danceability

Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.

For instance, the lowest danceability score is 0.175 for ***epiphany*** and the highest is 0.897 for ***I Think He Knows***.

##### epiphany

Click the button below to listen to ***epiphany***: Low Danceability Score

<audio controls>

<source src="audio/Taylor Swift - epiphany.mp3" type="audio/mpeg">

Your browser does not support the audio element. </audio>

##### I Think He Knows

Click the button below to listen to ***I Think He Knows***: High Danceability Score

<audio controls>

<source src="audio/Taylor Swift - I Think He Knows.mp3" type="audio/mpeg">

Your browser does not support the audio element. </audio>

##### Summary
Specifically, the average danceability score of Taylor Swift's songs is `r round(mean(ts.spotify$danceability), 2)`(*SD* = `r round(sd(ts.spotify$danceability, na.rm = TRUE), 1)`).


#### Energy

Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy.

For instance, the lowest energy score is 0.118 for ***State Of Grace - Acoustic*** and the highest is 0.948 for ***Haunted***.

##### State Of Grace - Acoustic

Click the button below to listen to ***State Of Grace - Acoustic***: Low Energy Score

<audio controls>

<source src="audio/Taylor Swift - State Of Grace (Acoustic Version) (Taylor's Version).mp3" type="audio/mpeg">

Your browser does not support the audio element. </audio>

##### Haunted

Click the button below to listen to ***Haunted***: High Energy Score

<audio controls>

<source src="audio/Taylor Swift - Haunted.mp3" type="audio/mpeg">

Your browser does not support the audio element. </audio>

##### Summary
Specifically, the average energy score of Taylor Swift's songs is `r round(mean(ts.spotify$energy), 2)`(*SD* = `r round(sd(ts.spotify$energy, na.rm = TRUE), 1)`).


#### Liveness

Liveness detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.

For instance, the lowest liveness score is 0.034 for ***I Knew You Were Trouble*** and the highest is 0.931 for ***Better Than Revenge - Live/2011***.

##### I Knew You Were Trouble

Click the button below to listen to ***I Knew You Were Trouble***: Low Liveness Score

<audio controls>

<source src="audio/Taylor Swift - I Knew You Were Trouble (Taylor's Version).mp3" type="audio/mpeg">


##### Better Than Revenge - Live/2011

Click the button below to listen to ***Better Than Revenge - Live/2011***: High Liveness Score

<audio controls>

<source src="audio/Taylor Swift - Better Than Revenge (Live2011).mp3" type="audio/mpeg">

##### Summary

Specifically, the average liveness score of Taylor Swift's songs is `r round(mean(ts.spotify$liveness), 2)`(*SD* = `r round(sd(ts.spotify$liveness, na.rm = TRUE), 1)`). It is notable that most albums have a liveness score close to 0, indicating that the majority of the songs are studio albums rather than live recordings. Nevertheless, it is possible that the same song may have different versions, such as live versions, acoustic versions, or remixes, which may have higher liveness scores. For instance, ***I Knew You Were Trouble*** has multiple live versions. Here is an example from reputation Stadium tour (Oct 19, 2018):

<video width="320" height="240" controls>
     <source src="audio/IKYWT live2018.mp4" type="video/mp4">
     Your browser does not support the video tag.
   </video>
   
   
#### Valence

A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).

For instance, the lowest valence score is 0.153 for ***Maroon*** and the highest is 0.943 for ***Shake It Off***.

##### Maroon

Click the button below to listen to ***Maroon***: Low Valence Score

<audio controls>

<source src="audio/Taylor Swift - Maroon.mp3" type="audio/mpeg">



##### Shake It Off

Click the button below to listen to ***Shake It Off***: High Valence Score

<audio controls>

<source src="audio/Taylor Swift - Shake It Off.mp3" type="audio/mpeg">

##### Summary

Specifically, the average valence score of Taylor Swift's songs is `r round(mean(ts.spotify$valence), 2)`(*SD* = `r round(sd(ts.spotify$valence, na.rm = TRUE), 1)`). This indicates that her songs are slightly skewed towards negative emotions. 


It is reasonable to conclude that the song ***Maroon*** has a low valence score based on the the lyrics and the muse of the song. Specifically, the lyrics are proven to be related to several plots in a book called "*The Seven Husbands of Evelyn Hugo*" by Taylor Jenkins Reid. The novel follows Evelyn rose from poverty to become a major star in the 1950s-60s, navigating the complicated world of Hollywood while hiding her true identity as a bisexual Cuban woman by seven marriages. "*The rust that grew between telephone*" is a metaphor for the distance between Evelyn and Celia when they experienced public love blackouts, and the "maroon" color is a symbol of both the joy they shared together (drinking wine) and pain that Evelyn has experienced. The book is claimed to be paralleled with Taylor Swift's life about her beard romantic relationships and love blackout with the New York muse Karlie Kloss. Karlie Kloss confirmed her identity as the ***Maroon*** muse by wearing the "Cheap Ass RosÃ©" bracelet to the Eras tour on Aug 9, 2023 in Los Angeles, which resembles the "roommate muse" in ***Maroon***. 

It is also easy to tell ***Shake It Off***  is a positive song if you listen to it!


***Note***: Loudness is not discussed here since all values are negative. Speechiness is not discussed here since all values are close to zero. Tempo is not considered in the popularity score prediction since it is unrelated. 

### Popularity Score Predictors

#### Record Labels

Taylor Swift left Big Machine Records, her original label since age 15, and signed with Universal Music Group's Republic Records in November 2018. This move came after her contract with Big Machine expired. Taylor wanted to own her master recordings, which Big Machine wouldn't allow. After leaving, Big Machine sold her back catalog to Scooter Braun's company, leading to a public dispute. Unable to buy back her masters, Taylor began re-recording her first six albums (i.e., Taylor's Version) to regain control of her work. This section presents the popularity scores of Taylor Swift's songs under different record labels, aiming to see if her control over her work affects the popularity of her songs.

```{r}
#| label: ANOVA for popularity scores by record label
#| include: false

# Perform ANOVA for popularity scores by record label
anova_pop_label <- aov(popularity ~ album_label, data = ts.spotify)
summary (anova_pop_label)
summary_label_effect <- summary(anova_pop_label)[[1]]

# Check effect size
SSbetween <- summary_label_effect$`Sum Sq`[1]  # Sum of squares for the factor
SStotal <- sum(summary_label_effect$`Sum Sq`)  # Total sum of squares

eta_squared <- SSbetween / SStotal

# Round to 3 decimal places
eta_squared_rounded <- round(eta_squared, 3)


```

One-way ANOVA results indicated significant differences were found between record labels' impacts on popularity scores (Figure 2). Specifically, songs under the Big Machine label showed lower popularity scores than under the Republic label ($M_{\text{Big Machine}} = `r round(mean(ts.spotify$popularity[ts.spotify$album_label == "Big Machine"]), 2)`$ vs. $M_{\text{Republic}} = `r round(mean(ts.spotify$popularity[ts.spotify$album_label == "Republic"]), 2)`$; *F*(`r summary_label_effect$Df[1]`, `r summary_label_effect$Df[2]`) = `r round(summary_label_effect$"F value"[1], 2)`; *p* `r if(summary_label_effect$"Pr(>F)"[1] < 0.001) "< 0.001" else paste("=", sprintf("%.3f", summary_label_effect$"Pr(>F)"[1]))`, Î·Â² = `r eta_squared_rounded`). It indicates that approximately 46.5% of the variance in popularity scores can be explained by the difference in record labels (Big Machine vs. Republic), suggesting that Taylor Swift's control over her work has a significant impact on the popularity of her songs. The ownership not only allows her to re-record her songs but also to control the distribution and promotion of her music, which may contribute to the higher popularity scores under the Republic label. It is notable that the re-record versions are generally promoted by fans as a way to support Taylor Swift's ownership of her work. This also reflects Taylor's determination to regain control of her work and the revolutionary impact of her move on the music industry.




```{r}
#| label: fig-popularity-by-label
#| fig.cap: "Popularity Scores by Record Label"

# Define the theme
theme.clean <- function(){
  theme_bw()+
    theme(axis.text.x = element_text(size = 12, vjust = 1, hjust = 1),
          axis.text.y = element_text(size = 12),
          axis.title.x = element_text(size = 14, face = "plain"),             
          axis.title.y = element_text(size = 14, face = "plain"),
          panel.grid.major.x = element_blank(),                                          
          panel.grid.minor.x = element_blank(),
          panel.grid.minor.y = element_blank(),
          panel.grid.major.y = element_blank(),  
          plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), units = , "cm"),
          plot.title = element_text(size = 16, vjust = 1, hjust = 0.5),
          plot.caption = element_text (size = 8,vjust = 1, hjust = 0.9),
          legend.text = element_text(size = 12, face = "italic"),          
          legend.position = "right")}

# Create the boxplot

label_effect_boxplot <- ggplot(ts.spotify, aes(album_label, popularity)) + 
  geom_boxplot(aes(fill = album_label)) +
  theme_bw() +
  scale_fill_manual(values = c("#f6ed95", "#800000")) +               
  scale_colour_manual(values = c("#f6ed95", "#800000")) + 
  labs(title = "Record Label Comparison of Song Popularity Impacts", 
       x = "Record Label", y = "Song Popularity Score") +
  theme.clean()+
  theme(axis.text.x = element_text(hjust = 0.5))+
  scale_y_continuous(breaks = seq(floor(min(ts.spotify$popularity)), 
                                  ceiling(max(ts.spotify$popularity)), by = 10)) +
  stat_summary(fun = mean, geom = "point", color = "black", size = 3, shape = 18, 
               position = position_dodge(0.75), aes(shape = "Mean"), 
               show.legend = FALSE) +  
  stat_summary(fun = mean, geom = "text", aes(label = round(after_stat(y), 2)), 
               color = "white", vjust = -1, position = position_dodge(0.75), 
               size = 3.5, show.legend = FALSE) +
  labs(fill = "Record Label") 

print (label_effect_boxplot)


```


#### Music Features

This section aims to observe how different music features contribute to song popularity and predict the popularity scores of Taylor Swift's songs using different music features. Specifically, the following features are considered: acousticness, danceability, energy, liveness, and valence.

##### History data: Descriptive Regression

This section presents the linear regression based on Spotify history data, focusing on existing dataset to describe the correlations between popularity scores and music features. 
```{r}
#| label: Descriptive linear regression model for popularity scores
#| include: false

features <- c("acousticness", "danceability", "energy", "liveness", "valence")
data_history <- ts.spotify[, c("popularity", features)]

# Build the multiple linear regression model
model_history <- lm(popularity ~ ., data = data_history)

# View the summary of the model
summary(model_history)

```

The multiple linear regression analysis revealed that `r sum(summary(model_history)$coefficients[-1, 4] < 0.05)` out of 5 predictors were significantly associated with popularity scores (*F*(`r summary(model_history)$fstatistic[2]`, `r summary(model_history)$fstatistic[3]`) = `r round(summary(model_history)$fstatistic[1], 2)`, *p* < .001, *R*Â² = `r round(summary(model_history)$r.squared, 3)`). Specifically, liveness (Î² = `r round(coef(model_history)["liveness"], 2)`, *p* < .001) and valence (Î² = `r round(coef(model_history)["valence"], 2)`, *p* = `r round(summary(model_history)$coefficients["valence", 4], 3)`) were significantly associated with popularity, while acousticness (Î² = `r round(coef(model_history)["acousticness"], 2)`, *p* = `r round(summary(model_history)$coefficients["acousticness", 4], 3)`), danceability (Î² = `r round(coef(model_history)["danceability"], 2)`, *p* = `r round(summary(model_history)$coefficients["danceability", 4], 3)`), and energy (Î² = `r round(coef(model_history)["energy"], 2)`, *p* = `r round(summary(model_history)$coefficients["energy", 4], 3)`) were not significant predictors. The model explained approximately 5% of the variance in popularity scores, indicating a relatively small effect size. The results suggest that liveness and valence are more likely to influence the popularity of Taylor Swift's songs than acousticness, danceability, and energy. 

The multiple linear regression model can be expressed as:

$$
\text{Popularity} = \beta_0 + \beta_1(\text{Acousticness}) + \beta_2(\text{Danceability}) + \beta_3(\text{Energy}) + \beta_4(\text{Liveness}) + \beta_5(\text{Valence}) + \epsilon
$$

Where:

$$
\begin{aligned}
\beta_0 &= `r round(coef(model_history)[1], 2)` \text{ (Intercept)} \\
\beta_1 &= `r round(coef(model_history)["acousticness"], 2)` \\
\beta_2 &= `r round(coef(model_history)["danceability"], 2)` \\
\beta_3 &= `r round(coef(model_history)["energy"], 2)` \\
\beta_4 &= `r round(coef(model_history)["liveness"], 2)` \\
\beta_5 &= `r round(coef(model_history)["valence"], 2)` \\
\epsilon &= \text{Error term}
\end{aligned}
$$

Figure 3 illustrates the relationship between popularity scores and music features based on the multiple linear regression model. Specifically, liveness and valence are negatively associated with popularity scores. The negative relationship between liveness and popularity scores suggests that songs with a higher probability of being live recordings are less popular. It is reasonable since most albums are studio albums rather than live recordings. Another reason is that most live recordings are under the Big Machine label, which has lower popularity scores. 

The negative relationship between valence and popularity scores indicates that songs with more negative emotions are more popular. This is consistent with the previous analysis, which showed that Taylor Swift's songs are slightly skewed towards negative emotions. As a 16-year Swiftie (Gaylor), I can better emotionally resonate with Taylor's songs related to her personal life, which often involves negative emotions. Many lyrics can reflect my own experiences and challenges in life, making me feel understood and less alone. This emotional connection may contribute to the popularity of songs with negative emotions. It is not necessarily the case that negative emotions are more popular, but rather that they are more relatable and emotionally impactful. All in all, we have to experience complicated emotions to feel alive. 




```{r}
#| label: fig-feature-popularity-regression-history
#| fig.cap: "Multiple Linear Regression Model for Popularity Scores (History Data)"
#| include: true

# Create a function to generate a plot for each predictor
plot_predictor <- function(data, x_var, y_var = "popularity", model) {
  ggplot(ts.spotify, aes_string(x = x_var, y = y_var)) +
    geom_point(alpha = 0.2, color = "#0073cf") +  
    geom_smooth(method = "lm", se = FALSE, color = "#800000") +
    labs(x = x_var, y = "Popularity") +
    theme_minimal() +
    theme(plot.title = element_text(hjust = 0.5)) +  
    ggtitle(paste("Popularity vs", x_var)) +
    annotate("label", x = Inf, y = -Inf, 
             label = paste("Î² =", round(coef(model)[x_var], 2)),
             hjust = 1, vjust = 0,
             fill = "white", alpha = 0.8)  
}

# Create a list of plots for each predictor
plots <- lapply(c("acousticness", "danceability", "energy", "liveness", "valence"), 
                function(x) plot_predictor(ts.spotify, x, model = model_history))

# Arrange the plots in a grid
grid_plot <- do.call(grid.arrange, c(plots, ncol = 2, top = "Relationship between Popularity and Music Features"))


```




##### Predictive Analysis

This section aims to predict the popularity scores of Taylor Swift's songs using different music features. Specifically, the dataset is split into training and testing sets, and a linear regression model is built using the training set. The model is then evaluated using the testing set, and the feature importance is visualized.


```{r}
#| label: Predictive linear regression model for popularity scores
#| include: false

features <- c("acousticness", "danceability", "energy", "liveness", "valence")
data_predictive <- ts.spotify[, c("popularity", features)]

# Split the data into training and testing sets
set.seed(123)  
trainIndex <- createDataPartition(data_predictive$popularity, p = 0.8, list = FALSE)
train_data <- data_predictive[trainIndex, ]
test_data <- data_predictive[-trainIndex, ]

# Build the linear regression model
model_predictive <- lm(popularity ~ ., data = train_data)

# Evaluate the model
# Make predictions on the test set
predictions <- predict(model_predictive, newdata = test_data)

# Calculate RMSE (Root Mean Square Error)
rmse <- sqrt(mean((test_data$popularity - predictions)^2))

# Calculate R-squared
r_squared <- summary(model_predictive)$r.squared

# Print model summary and evaluation metrics
summary(model_predictive)
cat("RMSE:", rmse, "\n")
cat("R-squared:", r_squared, "\n")


```

The multiple linear regression analysis revealed that `r sum(summary(model_predictive)$coefficients[-1, 4] < 0.05)` out of 5 predictors were significantly associated with popularity scores (*F*(`r summary(model_predictive)$fstatistic[2]`, `r summary(model_predictive)$fstatistic[3]`) = `r round(summary(model_predictive)$fstatistic[1], 2)`, *p* < .001, *R*Â² = `r round(summary(model_predictive)$r.squared, 3)`). Specifically, liveness (Î² = `r round(coef(model_predictive)["liveness"], 2)`, *p* < .001) and valence (Î² = `r round(coef(model_predictive)["valence"], 2)`, *p* = `r round(summary(model_predictive)$coefficients["valence", 4], 3)`) were significantly associated with popularity, while acousticness (Î² = `r round(coef(model_predictive)["acousticness"], 2)`, *p* = `r round(summary(model_predictive)$coefficients["acousticness", 4], 3)`), danceability (Î² = `r round(coef(model_predictive)["danceability"], 2)`, *p* = `r round(summary(model_predictive)$coefficients["danceability", 4], 3)`), and energy (Î² = `r round(coef(model_predictive)["energy"], 2)`, *p* = `r round(summary(model_predictive)$coefficients["energy", 4], 3)`) were not significant predictors. The model explained `r round(summary(model_predictive)$r.squared * 100, 1)`% of the variance in popularity scores. The visualization will be almost the same with the descriptive regression in the previous section. 

The multiple linear regression model can be expressed as:

$$
\text{Popularity} = \beta_0 + \beta_1(\text{Acousticness}) + \beta_2(\text{Danceability}) + \beta_3(\text{Energy}) + \beta_4(\text{Liveness}) + \beta_5(\text{Valence}) + \epsilon
$$

Where:

$$
\begin{aligned}
\beta_0 &= `r round(coef(model_predictive)[1], 2)` \text{ (Intercept)} \\
\beta_1 &= `r round(coef(model_predictive)["acousticness"], 2)` \\
\beta_2 &= `r round(coef(model_predictive)["danceability"], 2)` \\
\beta_3 &= `r round(coef(model_predictive)["energy"], 2)` \\
\beta_4 &= `r round(coef(model_predictive)["liveness"], 2)` \\
\beta_5 &= `r round(coef(model_predictive)["valence"], 2)` \\
\epsilon &= \text{Error term}
\end{aligned}
$$

## Sentiment Analysis of Lyrics - Taylor As A Person

The second part of this project focuses on analyzing Taylor Swift's lyrics using sentiment analysis. The Spotify dataset provides measurement of Taylor's music in the industry by popularity scores, but it does not capture the essence of her music and the emotions she conveys through her lyrics. When we dive deep into Taylor's narratives, we can better understand her as a person and resonate with her work. 


***"Let me say it again, louder for those in the back...We think we know someone, but the truth is that we only know the version of them that they have chosen to show us."***

â€”â€”Reputation [Prologue] by Taylor Swift

![Reputation Prologue](Image/Fig 04_Reputation Prologue.jpg)

The Reputation prologue is one of my favorite quotes from Taylor Swift. It reflects the complexity of human nature and the different versions of ourselves we present to the world. Taylor Swift is known for her storytelling and emotional depth in her lyrics, which often reflect her personal experiences and emotions. Nevertheless, it is essential to recognize that different people may interpret her lyrics differently based on their own experiences, values, and perspectives. This section aims to analyze Taylor's lyrics combining her personal life changes to better understand her as a person. 


### The Miserable Track 5

According to Taylor, the fifth track is usually her most emotional, vulnerable, and raw track on the album. A Reddit user named u/LaraEligia once described the track 5 as "***the track that punches you in the face calls you names kicks you in the stomach punctures your spleen with a kitchen knife and leaves you bleeding to death***". 

#### Track 5 and Valence Score Table

The table below shows the track 5 of each album and the corresponding valence score. It is true that most track 5s have a low valence score. Scores higher than 0.5 (i.e., skewed to positive emotions) include only ***All You Had To Do Was Stay*** from ***1989***, which is a song with relatively positive melody. The ***Holy Ground*** from ***reputation Stadium Tour Surprise Song Playlist*** does not count because it is a live recording album rather than a typical studio album.

```{r}
#| label: Track 5 and Valence Score Table
#| tbl-cap: "Table 2: Track 5 of Each Album and Valence Score"

# Extract track 5 from each album
track_5_data <- ts.spotify %>%
  filter(track_number == 5) %>%
  select(album, track_name, valence) %>%
  arrange(valence) 

# Create the table
track_5_table <- kable(track_5_data, 
                       col.names = c("Album", "Track 5", "Valence Score"),
                       align = c("l", "l", "c"),
                       digits = 3) %>%
  kable_styling(bootstrap_options = c("striped", "hover"),
                full_width = FALSE,
                position = "center") %>%
  column_spec(1:2, width = "12em") %>%
  column_spec(3, width = "8em", bold = TRUE) %>%
  row_spec(0, bold = TRUE, color = "white", background = "#0073CF")

# Display the table
track_5_table

```



#### Track 5 and Valence Score Analysis

```{r}
#| label: track-5-t-test
#| include: false

# Prepare the data
ts.spotify$is_track_5 <- ifelse(ts.spotify$track_number == 5, "Track 5", "Other Tracks")

# Perform t-test
t_test_result <- t.test(valence ~ is_track_5, data = ts.spotify)

# Perform Wilcoxon test (non-parametric alternative)
wilcox_test_result <- wilcox.test(valence ~ is_track_5, data = ts.spotify)

# Calculate mean valence for track 5 and other tracks
mean_valence_track5 <- mean(ts.spotify$valence[ts.spotify$track_number == 5], na.rm = TRUE)
mean_valence_others <- mean(ts.spotify$valence[ts.spotify$track_number != 5], na.rm = TRUE)




```

The analysis comparing the valence scores of track 5 to other tracks revealed `r ifelse(t_test_result$p.value < 0.05, "a significant", "no significant")` difference (t(`r round(t_test_result$parameter, 1)`) = `r round(t_test_result$statistic, 2)`, *p* = `r round(t_test_result$p.value, 3)`). The mean valence score for track 5 was `r round(mean_valence_track5, 3)`, compared to `r round(mean_valence_others, 3)` for other tracks. Figure 5 illustrates the comparison of valence scores between track 5 and other tracks. The results suggest that track 5 tends to have lower valence scores than other tracks with more data point proportion condensed at the lower end, supporting that track 5 is often the most vulnerable, emotional, and raw track on Taylor Swift's albums.


```{r}
#| label: fig-track-5-valence-boxplot
#| fig.cap: "Valence Scores of Track 5 vs. Other Tracks"
#| include: true
#| warning: false

# Calculate means for annotation
mean_valence <- ts.spotify %>%
  group_by(is_track_5) %>%
  summarize(mean_valence = mean(valence, na.rm = TRUE))

custom_colors_track <- c("Track 5" = "lightyellow", "Other Tracks" = "lightblue")

# Create the plot
track_5_box <- ggplot(ts.spotify, aes(x = is_track_5, y = valence, fill = is_track_5)) +
  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  
  geom_jitter(width = 0.2, alpha = 0.2, color = "darkgrey") +
  stat_summary(fun = mean, geom = "point", shape = 18, size = 4, color = "#800000") +
  geom_text(data = mean_valence, aes(y = mean_valence, label = round(mean_valence, 3)),
            vjust = -1, color = "#800000") +
  labs(title = "Comparison of Valence Scores: Track 5 vs. Other Tracks",
       x = "Track Position", y = "Valence Score") +
  theme.clean() +
  theme(axis.text.x = element_text(hjust = 0.5))+
  scale_fill_manual(values = custom_colors_track)+
  labs(fill = "Track Position") 

# Add t-test results to the plot
track_5_box <- track_5_box + annotate("text", x = 1.5, y = max(ts.spotify$valence, na.rm = TRUE),
                  label = paste("t-test p-value =", format.pval(t_test_result$p.value, digits = 3)),
                  hjust = 0.5, vjust = 1)

# Display the plot
print(track_5_box)





```






### Sentiment Analysis of Lyrics

This section aims to analyze the sentiment of Taylor Swift's lyrics using sentiment analysis based on 11 studio albums. 


```{r}
#| label: Sentiment analysis of Taylor Swift's lyrics by album
#| include: false

# Create a named vector for album name replacements
album_replacements <- c(
  "TSW" = "TS1: Taylor Swift",
  "FER" = "TS2: Fearless",
  "SPN" = "TS3: Speak Now",
  "RED" = "TS4: Red",
  "NEN" = "TS5: 1989",
  "REP" = "TS6: Reputation",
  "LVR" = "TS7: Lover",
  "FOL" = "TS8: Folklore",
  "EVE" = "TS9: Evermore",
  "MID" = "TS10: Midnights",
  "TPD" = "TS11: The Tortured Poets Department"
)

# Load the lyrics data
lyrics_data <- read_tsv("data/ts.lyric.tsv", 
                        col_names = c("album_name", "lyric_content")) %>%
  mutate(album_name = str_extract(album_name, "^[^:]+")) %>%  
  filter(!is.na(lyric_content)) %>% 
  filter(!str_detect(album_name, "^OTH")) %>% 
  mutate(album_name = recode(album_name, !!!album_replacements)) 

# Preprocess the data
lyrics_tokens <- lyrics_data %>%
  unnest_tokens(word, lyric_content)

# Perform sentiment analysis
sentiments <- get_sentiments("bing")

lyrics_sentiment <- lyrics_tokens %>%
  inner_join(sentiments) %>%
  count(album_name, sentiment) %>%
  pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
  mutate(sentiment_score = positive - negative,
         album_order = as.numeric(str_extract(album_name, "\\d+"))) %>%  
  arrange(album_order)  # Arrange by album number to facilitate later visualization

# Average sentiment score by album
album_sentiment <- lyrics_sentiment %>%
  group_by(album_name) %>%
  summarize(avg_sentiment = mean(sentiment_score)) %>%
  mutate(album_order = as.numeric(str_extract(album_name, "\\d+"))) %>%
  arrange(album_order)

```




The sentiment analysis of Taylor Swift's lyrics by album is presented in Table 3 and Figure 5. The sentiment scores are based on the BING lexicon, which categorizes words as positive or negative. The sentiment score is calculated as the difference between the number of positive and negative words in the lyrics. Positive values indicate more positive sentiment, while negative values indicate more negative sentiment. The absolute value of the sentiment score reflects the intensity of the sentiment.

The average sentiment scores by album are shown below:



```{r}
#| label: Generate sentiment analysis table by album
#| tbl-cap: "Table 3: Sentiment Analysis of Taylor Swift's Lyrics by Album"
#| include: true

# Define album colors by album's corresponding hex palette
album_colors <- c(
  "TS1: Taylor Swift" = "#00a3ad",
  "TS2: Fearless" = "#f6ed95",
  "TS3: Speak Now" = "#513163",
  "TS4: Red" = "#951e1a",
  "TS5: 1989" = "#789ac0",
  "TS6: Reputation" = "#000000",
  "TS7: Lover" = "#fdc0cc",
  "TS8: Folklore" = "#7f7f7f",
  "TS9: Evermore" = "#cc621b",
  "TS10: Midnights" = "#1e0c6e",
  "TS11: The Tortured Poets Department" = "#edebe7"
)

# Function to determine text color based on background
get_text_color <- function(bg_color) {
  if (mean(col2rgb(bg_color)) > 128) {
    return("black")
  } else {
    return("white")
  }
}

# Create a kable
sentiment_table <- album_sentiment %>%
  select(Album = album_name, `Average Sentiment` = avg_sentiment) %>%
  kbl(caption = "Average Sentiment Scores by Album",
      digits = 3,
      align = c("l", "c")) %>%
  kable_classic(full_width = FALSE, html_font = "Arial", font_size = 14) %>%
  row_spec(0, bold = TRUE, color = "white", background = "#4E79A7") %>%
  column_spec(1, width = "15em", bold = TRUE) %>%
  column_spec(2, width = "10em") %>%
  add_header_above(c(" " = 1, "Sentiment Analysis" = 1)) %>%
  footnote(general = "Based on BING lexicon sentiment analysis",
           general_title = "Note:",
           footnote_as_chunk = TRUE)


# Apply custom colors to each row
for (i in 1:nrow(album_sentiment)) {
  bg_color <- album_colors[album_sentiment$album_name[i]]
  text_color <- get_text_color(bg_color)
  sentiment_table <- sentiment_table %>%
    row_spec(i, background = bg_color, color = text_color)
}

# Display the table
sentiment_table




```


```{r}
#| label: fig-sentiment-analysis-by-album
#| fig.cap: "Average Sentiment Scores of Taylor Swift's Lyrics by Album"
#| include: true


# Create a bar plot of average sentiment by album

sentiment_plot <- ggplot(album_sentiment, aes(x = reorder(album_name, avg_sentiment), y = avg_sentiment, fill = album_name)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = album_colors) +
  coord_flip() +
  labs(title = "Average Sentiment Score by Album",
       x = "Album",
       y = "Average Sentiment Score") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = 8),
        legend.position = "none") 

# Display the plot
print(sentiment_plot)


```



Figure 6 illustrates the progression of sentiment scores across Taylor Swift's albums by a line chart. It is notable that all of the first seven albums have positive sentiment scores, though featuring flunctuations from album to album. However, all recent four albums have negative sentiment scores (with evermore has a slightly positive score), indicating a shift in the emotional tone of Taylor Swift's lyrics. This shift may reflect her changing perspectives and evolving experiences over time. The sentiment progression of Taylor Swift's lyrics provides insights into her emotional journey, allowing listeners to connect with her music on a deeper level.






```{r}
#| label: fig-sentiment-progress-by-album
#| fig.cap: "Sentiment Progression of Taylor Swift's Lyrics by Album"
#| include: true


# Define album colors, order, and release years
album_line <- tibble(
  album_name = c(
    "TS1: Taylor Swift", "TS2: Fearless", "TS3: Speak Now", "TS4: Red", "TS5: 1989",
    "TS6: Reputation", "TS7: Lover", "TS8: Folklore", "TS9: Evermore", "TS10: Midnights",
    "TS11: The Tortured Poets Department"
  ),
  release_year = c(2006, 2008, 2010, 2012, 2014, 2017, 2019, 2020, 2020, 2022, 2024),
  color = c(
    "#00a3ad", "#f6ed95", "#513163", "#951e1a", "#789ac0", "#000000", 
    "#fdc0cc", "#7f7f7f", "#cc621b", "#1e0c6e", "#edebe7"
  )
)

# Merge album_data with album_sentiment
album_sentiment_timeline <- album_sentiment %>%
  left_join(album_line, by = "album_name") %>%
  arrange(release_year) %>%
  mutate(album_name = factor(album_name, levels = album_line$album_name))

# Create the line chart
sentiment_timeline_plot <- ggplot(album_sentiment_timeline, 
                                  aes(x = release_year, y = avg_sentiment, group = 1)) +
  geom_line(color = "gray", size = 1) +
  geom_point(aes(color = album_name), size = 4) +
  scale_color_manual(values = setNames(album_line$color, album_line$album_name)) +
  scale_x_continuous(breaks = album_sentiment_timeline$release_year) +
  labs(title = "Sentiment Change Across Taylor Swift's Albums",
       x = "Release Year",
       y = "Average Sentiment Score",
       color = "Album") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "right",
        plot.title = element_text(hjust = 0.5, face = "bold"))

# Display the plot
print(sentiment_timeline_plot)








```

There are multiple factors that may contribute to the shift in sentiment scores across Taylor Swift's albums. For instance, the transition from country to pop music (1989) may have influenced the emotional tone of her lyrics, focusing more on sophisticated and complicated emotions rather than depicting pure love life. The personal experiences and relationships she went through during each album's creation may also have played a significant role. Apart from these, the Hollywood industry and the public's perception of her may have influenced her emotional state and the themes she explores in her music. For instance, the industry, media, and fans' reactions and expectations to her personal life, relationships, body image, and political values may have impacted her emotional well-being and the sentiments she conveys in her lyrics. It is difficult for her to be perfectly happy when she is constantly under public scrutiny and facing challenges in her personal life. She was often portrayed as a "victim" of men and the industry in the media, which may have influenced her emotional state. 

From my perspective, music before ***reputation*** serves more for "Taylor as a brand", which reflects more exploration on music styles. ***1989*** is a turning point for Taylor Swift, which marks her transition from country to pop music. It is also notable that Taylor met Karlie Kloss during the ***1989*** era, and Karlie is the one who persuaded Taylor to move to New York City. This is the reason why Karlie is recognized as the muse in New York in later albums. ***reputation*** is a significant album for Taylor Swift, which marks her transformation from "America's Sweetheart" to a "Reputation" queen. Part of the album is a response to the media and public's perception of her, which is a turning point for her to take control of her narrative, including her control over her work by leaving Big Machine Records. It is also notable that the love life in ***reputation*** is more about her relationship with Karlie Kloss as a secret love:


<embed src="source/Reputation is about Karlie Kloss.pdf" type="application/pdf" width="100%" height="600px" />



***Lover*** is a significant album for Taylor Swift, which features a high volumn of queer representations, metaphors, and symbols. It is rumored that Taylor intended to come out as bisexual during the Lover era but failed to do so due to complicated political reasons, which also contributes to the love blackout of Taylor and Karlie. 


![Lover Era Queerness](Image/Fig 08_Lover Era Queerness.jpg)

It is not difficult to infer that the steep progression to negative sentiment scores in ***Folklore*** and ***Evermore*** is related to the love blackout of Taylor and Karlie, as well as her failure to come out. The ***Midnights*** and ***The Tortured Poets Department*** are the most recent albums, which features more intense negative emotions. The sister albums ***Folklore*** and ***Evermore*** combines myths, fairy tales, and personal experiences, which reflects Taylor's exploration of her inner world and the complexity of her life. It is worth mentioning that the queer representation in ***Folklore*** and ***Evermore*** is more subtle, implicit, and miserable, which is different from the explicit queer representation in ***Lover***. For instance, ***Seven*** features a lyric of "Come live with me then you won't have to cry or hide in the closet", which is a metaphor of hiding sexuality. ***Evermore*** features more historical queer evidence. For instance, ***Cowboy Like Me*** mirrors the forbidden love between two cowboys in the movie ***Brokeback Mountain***, while the "hairpin" metaphor in ***Right where you left me*** is a symbol of queer people recognizing each other during the Stonewall era. ***Ivy*** is absolutely Taylor's most queer song forever, which dedicates to Emily Dickinson. 


![Fail to Come Out](Image/Fig 09_Failed come out.webp)

Taylor is good at employing intertextuality, metaphors, and symbols in her lyrics, which makes her music more profound and open to interpretation. The queer representation in her music is not only about her personal life but also about the history of queer people and the struggles they have faced. It is a way for her to express her support for the LGBTQ+ community and to raise awareness of the challenges they face. The negative sentiment scores in her recent albums may reflect her struggles with her identity, relationships, and the public's perception of her. It is essential to recognize that Taylor Swift is a complex and multifaceted person, and her music reflects her personal experiences, emotions, and values. As a fan, I appreciate her honesty, vulnerability, and courage to share her story with the world. Her music has helped me through difficult times and inspired me to be true to myself and stand up for what I believe in. I hope that Taylor Swift's music will continue to inspire and empower people to be themselves and embrace their uniqueness.


### Easter Eggs: Can Wordclouds Reveal Taylor's Secrets?
















